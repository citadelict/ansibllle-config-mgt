pipeline {
  agent any

  environment {
    ANSIBLE_CONFIG = "${WORKSPACE}/deploy/ansible.cfg"
    ANSIBLE_HOST_KEY_CHECKING = 'False'
  }

  parameters {
    string(name: 'inventory', defaultValue: 'dev', description: 'The inventory file for the environment to deploy configuration')
  }

  stages {
    stage("Initial cleanup") {
      steps {
        dir("${WORKSPACE}") {
          deleteDir()
        }
      }
    }

    stage('Checkout SCM') {
      steps {
        git branch: 'main', url: 'https://github.com/citadelict/ansibllle-config-mgt.git'
      }
    }

    stage('Prepare Ansible For Execution') {
      steps {
        sh 'echo ${WORKSPACE}'
        sh 'sed -i "3 a roles_path=${WORKSPACE}/roles" ${WORKSPACE}/deploy/ansible.cfg'
      }
    }

    stage('Test SSH Connections') {
      steps {
        script {
          def hosts = [
            // [group: 'tooling', ip: '172.31.30.46', user: 'ec2-user'],
            [group: 'todo', ip: '172.31.29.163', user: 'ec2-user'],
            // [group: 'nginx', ip: '172.31.26.108', user: 'ubuntu'],
            // [group: 'db', ip: '172.31.24.250', user: 'ubuntu']
            // [group: 'artifactory', ip: '172.31.30.88', user: 'ubuntu'],
          ]
          for (host in hosts) {
            sshagent(['private-key']) {
              sh "ssh -o StrictHostKeyChecking=no -i /home/ubuntu/.ssh/key.pem ${host.user}@${host.ip} exit"
            }
          }
        }
      }
    }

    stage('Run Ansible playbook') {
      steps {
        sshagent(['private-key']) {
          ansiblePlaybook(
            become: true,
            credentialsId: 'private-key',
            disableHostKeyChecking: true,
            installation: 'ansible',
            inventory: "${WORKSPACE}/inventory/${params.inventory}.yml",
            playbook: "${WORKSPACE}/playbooks/site.yml",
            tags: "${params.ansible_tags}"
          )
        }
      }
    }

    stage('Clean Workspace after build') {
      steps {
        cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenUnstable: true, deleteDirs: true)
      }
    }
  }
}
