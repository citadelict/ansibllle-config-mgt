---
# Install Apache
- name: Install Apache
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.yum:
    name: httpd
    state: present

# Install EPEL release
- name: Install EPEL release
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.command:
    cmd: sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm -y

# Install dnf-utils and Remi repository
- name: Install dnf-utils and Remi repository
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.command:
    cmd: sudo dnf install dnf-utils http://rpms.remirepo.net/enterprise/remi-release-9.rpm -y

# Reset PHP module
- name: Reset PHP module
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.command:
    cmd: sudo dnf module reset php -y

# Enable PHP 7.4 module
- name: Enable PHP 7.4 module
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.command:
    cmd: sudo dnf module enable php:remi-7.4 -y

# Install PHP and extensions
- name: Install PHP and extensions
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.yum:
    name:
      - php
      - php-opcache
      - php-gd
      - php-curl
      - php-mysqlnd
      - unzip
      - php-common
      - php-mbstring
      - php-opcache
      - php-intl
      - php-xml
      - php-fpm
      - php-json
    state: present
    enablerepo: remi-7.4

# Start PHP-FPM service
- name: Start PHP-FPM service
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.service:
    name: php-fpm
    state: started

# Enable PHP-FPM service
- name: Enable PHP-FPM service
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.service:
    name: php-fpm
    enabled: true

# Set SELinux boolean for httpd_execmem
- name: Set SELinux boolean for httpd_execmem
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.command:
    cmd: sudo setsebool -P httpd_execmem 1

# Start httpd service, if not started
- name: Start httpd service, if not started
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.service:
    name: httpd
    state: started

# Download the artifact
- name: Download the artifact
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.get_url:
    url: http://18.192.100.8:8082/artifactory/Todo-dev/php-todo.zip
    dest: /home/ec2-user/php-todo.zip
    url_username: admin
    url_password: guessWhat232@

# Unzip the artifacts
- name: Unzip the artifacts
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.unarchive:
    src: /home/ec2-user/php-todo.zip
    dest: /home/ec2-user/php-todo/
    remote_src: yes

# Deploy the code
- name: Deploy the code
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.copy:
    src: /home/ec2-user/php-todo/
    dest: /var/www/html/
    force: yes
    remote_src: yes

# Remove nginx default page
- name: Remove nginx default page
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.file:
    path: /etc/httpd/conf.d/welcome.conf
    state: absent

# Restart httpd
- name: Restart httpd
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.service:
    name: httpd
    state: restarted

# Verify PHP version
- name: Verify PHP version
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.command: php -v
  register: php_version

# Display PHP version
- name: Display PHP version
  remote_user: ec2-user
  become: true
  become_user: root
  ansible.builtin.debug:
    msg: "{{ php_version.stdout }}"
